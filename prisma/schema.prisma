// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Unit {
  Kg
  G
  Unit
}

model Vegetable {
  id                  String               @id @default(cuid())
  name                String
  imagePublicId       String
  imageOriginalWidth  Int
  imageOriginalHeight Int
  unit                Unit
  pricePerUnit        Float
  hidden              Boolean              @default(false)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  orderVegetables     OrderVegetable[]
  userOrderVegetables UserOrderVegetable[]
}

model Order {
  id                  String               @id @default(cuid())
  isActive            Boolean              @default(true)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  orderVegetables     OrderVegetable[]
  userOrderVegetables UserOrderVegetable[]

  @@index([createdAt])
}

model OrderVegetable {
  order               Order                @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId             String
  vegetable           Vegetable            @relation(fields: [vegetableId], references: [id], onDelete: Cascade)
  vegetableId         String
  userOrderVegetables UserOrderVegetable[]

  @@id([orderId, vegetableId])
}

model UserOrderVegetable {
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  order          Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId        String
  vegetable      Vegetable      @relation(fields: [vegetableId], references: [id], onDelete: Cascade)
  vegetableId    String
  orderVegetable OrderVegetable @relation(fields: [orderId, vegetableId], references: [orderId, vegetableId], onDelete: Cascade)
  quantity       Float

  @@id([userId, orderId, vegetableId])
}

// From Auth.js

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_in        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                  String               @id @default(cuid())
  name                String?
  email               String?              @unique
  emailVerified       DateTime?
  image               String?
  isAdmin             Boolean              @default(false)
  accounts            Account[]
  sessions            Session[]
  userOrderVegetables UserOrderVegetable[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
